require DomainModel DomainModel.cafe
provide Proof

module! ProofBase {
  protecting(STATERules)

  op _!_ : Bool Bool -> Bool {constr assoc}
  op _=>_!!_ : State State Bool -> Bool {constr}

  var RS : Resource
  var SetRS : SetOfResource
  var SetPR : SetOfProperty
  vars S SS : State

  -- The invariant should be defined as the conjunction of all inv-* and all wfs-*.
  -- But this definition causes costly computations.

  pred inv-ifRSStartedThenPRReady : State
  eq inv-ifRSStartedThenPRReady(< SetRS,SetPR >)
     = ifRSInStatesThenPRInStates(SetRS,started,SetPR,ready) .

--> *************************
--> Step 0-2: Define cont(S).
--> *************************
  pred cont : State
  eq cont(S)
     = (S =(*,1)=>+ SS) .

--> **********************
--> Step 0-3: Define m(S).
--> **********************
  op m : State -> Nat
  eq m(< SetRS,SetPR >)
     = #ResourceInStates(initial,SetRS) + #PropertyInStates(notready,SetPR) .

--> ************************
--> Step 0-4: Define inv(S).
--> ************************
  pred inv : State

  -- wfs-*:
  ceq inv(S) = false if not wfs-atLeastOneRS(S) .
  ceq inv(S) = false if not wfs-allPRHaveRS(S) .
  ceq inv(S) = false if not wfs-allPRHaveRRS(S) .

  -- inv-*:
  ceq inv(S) = false if not inv-ifRSStartedThenPRReady(S) .

--> ********************************************************
--> Step 0-5: Prepare for using the Cyclic Dependency Lemma.
--> ********************************************************
  -- From Cyclic Dependency Lemma
  -- There is an initial resource whose DDSC includes no initial resourecs.
  var T : RSType
  var IDRS : RSID
  ceq [Cycle :nonexec]: 
     true = false if someRSInStates(DDSC(res(T, IDRS, initial),S),initial) .

--> **************************************
--> Step 0-6: Prepare arbitrary constants.
--> **************************************
  ops idRS idRS' idRS1 : -> RSIDLt
  ops idRRS idRRS' idRRS1 : -> RSIDLt
  ops idPR idPR' idPR1 : -> PRIDLt
  ops sRS sRS' sRS'' sRS''' : -> SetOfResource
  ops sPR sPR' sPR'' sPR''' : -> SetOfProperty
  ops trs trs' trs'' trs''' : -> RSType
  ops tpr tpr' tpr'' tpr''' : -> PRType
  ops srs srs' srs'' srs''' : -> RSState
  ops spr spr' spr'' spr''' : -> PRState
  op stRS : -> SetOfRSState
  op stPR : -> SetOfPRState
  op x : -> Resource
}

-- *************************************************************************
-- (1) init(S) implies cont(S).
-- (2) inv(S) and not final(S) implies cont(SS) or final(SS).
-- (3) inv(S) and not final(S) implies measure(S) > measure(SS).
-- (4) init(S) implies inv(S).
-- (5) inv(S) implies inv(SS).
-- *************************************************************************

-- ****************************
-- (1) init(S) implies cont(S).
-- ****************************
-- in Proof-initcont.cafe

-- **********************************************************
-- (2) inv(S) and not final(S) implies cont(SS) or final(SS).
-- **********************************************************
-- in Proof-contcont.cafe

-- *************************************************************************
-- (3) inv(S) and not final(S) implies measure(S) > measure(SS).
-- *************************************************************************
-- in Proof-measure.cafe

-- ***************************
-- (4) init(S) implies inv(S).
-- (5) inv(S) implies inv(SS).
-- ***************************
-- in Proof-inv.cafe
