require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ****************************************************
-->  trans [R02]:
-->     < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
-->  => < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
--> ****************************************************
select ProofContCont .
-- When R02 can be applied to the state S:
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >) = true .
}
--> ******************************************************
--> Step 2-2: Split the current case for a rule into cases
--> where the condition of the rule does or does not hold.
--> ******************************************************
-- R02 is unconditional.
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
-- If all of the other resources are started, the next state is final.
-- But it is not the case because we know a notready property has
-- an initial parent resource.
--> ***************************************************************
--> Step 2-7: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The parent resource of the property does or does not exist.
:csp {
  eq existRS(sRS,idRS) = false .
  eq sRS = (res(trs',idRS,srs') sRS') .
}
-- Case 1: When the parent resource of the property does not exist:
:apply (rd) -- 1
-- Case 2: When the parent resource of the property exists:
-- The parent resource is initial or started.
:csp {
  eq srs' = initial .
  eq srs' = started .
}
-- Case 2-1: When the parent resource is initial:
-- Cyclic Dependency Lemma ensures there is an initial resource R
-- where DDSC(R,S) does not include any initial nodes.
:init ( eq SRS:SetOfResource = (RS:Resource SRS':SetOfResource) . ) by {
  SRS:SetOfResource <- sRS';
  SRS':SetOfResource <- sRS'';
  RS:Resource <- res(trs'',idRS1,initial);
}
--> ************************************************************
--> Step 2-4: Consider which rule can be applied to the next state.
--> ************************************************************
-- The next rule should be R01 for the resource of idRS1.
--> *************************************************************************************
--> Step 2-5: Split the current case into cases which collectively cover the current case
-->  and the next state of one of the split cases matches to LHS of the current rule.
--> *************************************************************************************
--> The case already matches to LHS of R01.
--> ***************************************************************
--> Step 2-6: Split the current case into cases where the condition
-->  of the current rule does or does not hold in the next state.
--> ***************************************************************
-- The condition of R01 does or does not hold for the resource o idRS1.
:csp {
  eq allPROfRSInStates(sPR,idRS1,ready) = true .
  eq sPR = (prop(tpr',idPR1,notready,idRS1,idRRS1) sPR') .
}
-- Case 2-1-1: When all the properties of the resource idRS1 are ready.
:apply (rd) -- 2-1-1
-- Case 2-1-2: When one of properties of the resource idRS1 is not-ready.
--> ***************************************************************
--> Step 2-7: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The resource referred by the property does or does not exist.
:csp {
  eq existRS(sRS'',idRRS1) = false .
  eq sRS'' = (res(trs''',idRRS1,srs''') sRS''') .
}
-- Case 2-1-2-1: When the resource referred by the property does not exist:
:apply (rd) -- 2-1-2-1
-- Case 2-1-2-2: When the resource referred by the property exists:
-- The state of the resource is initial or started.
:csp { 
  eq srs''' = initial .
  eq srs''' = started .
}
-- Case 2-1-2-2-1: When the resource idRRS1 is initial:
--> ******************************************************************************
--> Step 2-8: When falling in a cyclic situation, use the Cyclic Dependency Lemma.
--> ******************************************************************************
-- The Cyclic Dependency Lemma rejects this case.
:init [Cycle] by {
  T:RSType <- trs'';
  IDRS:RSID <- idRS1;
  S:State <- < (res(trs, idRRS, started) sRS),
               (prop(tpr,idPR,notready,idRS,idRRS) sPR) >;
}
:apply (rd) -- 2-1-2-2-1
-- Case 2-1-2-2-2: When the resource idRRS1 is started:
:apply (rd) -- 2-1-2-2-2
-- Case 2-2: When the parent resource is started:
:apply (rd) -- 2-2
show proof

select
