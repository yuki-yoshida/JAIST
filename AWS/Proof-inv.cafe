require Proof Proof.cafe

--> ***************************
--> (5) init(S) implies inv(S).
--> (6) inv(S) implies inv(SS).
--> ***************************

--> **********************************************
--> Step 5-0,6-0: Define a predicate to be proved.
--> **********************************************
module! ProofInv {
  protecting(PROOFbase)
  protecting(STATERules)

  vars S SS : State
  var CC : Bool

  pred invK : State

  pred initinv : State
  eq initinv(S)
     = init(S) implies invK(S) .

  pred iinv : State State .
  eq iinv(S,SS)
     = inv(S) and invK(S) implies invK(SS) .
  pred invinv : State
  eq invinv(S)
     = not (S =(*,1)=>+ SS if CC suchThat
            not ((CC implies iinv(S,SS)) == true)
     	   { S => SS !! CC ! inv(S) ! invK(S) ! invK(SS) }) .
}

--> *************************************************************
--> Proof of inv-ifRSStartedThenPRReady.
-->  eq inv-ifRSStartedThenPRReady(< SetRS,SetPR >)
-->     = ifRSInStatesThenPRInStates(SetRS,started,SetPR,ready) .
--> *************************************************************
--> Proof of inv(S) implies inv(SS)
module! Proofinv-ifRSStartedThenPRReady {
  protecting(ProofInv)

  var S : State
  eq invK(S) = inv-ifRSStartedThenPRReady(S) .

  var SetRS : SetOfResource
  var SetPR : SetOfProperty
  vars IDRS IDRRS : RSID
  var IDPR : PRID
  var TPR : PRType

--> ******************************************************************
--> Step 5-1,6-1: Instantiate proved lemmas for predefined predicates.
--> ******************************************************************
  -- Instantiating m2o-lemma07:
  eq [m2o-lemma07]:
      (allRSInStates(SetRS,initial) and 
       ifRSInStatesThenPRInStates(SetRS,started,SetPR,ready))
    = allRSInStates(SetRS,initial) .

  -- Instantiating m2o-lemma11:
  eq [m2o-lemma11]:
     (ifRSInStatesThenPRInStates(SetRS, started, (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR), ready) and
      ifRSInStatesThenPRInStates(SetRS, started, (prop(TPR,IDPR,   ready,IDRS,IDRRS) SetPR), ready))
    = ifRSInStatesThenPRInStates(SetRS, started, (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR), ready) .
}

select Proofinv-ifRSStartedThenPRReady
--> ***************************
--> (5) init(S) implies inv(S).
--> ***************************
--> *******************************************
--> Step 5-2: Begin with the most general case. 
--> *******************************************
:goal {
  eq initinv(< sRS,sPR >) = true .
}
:apply (rd) -- goal
show proof

--> ***************************
--> (6) inv(S) implies inv(SS).
--> ***************************
--> ********************************************
-->  ctrans [R01]:
-->     < (res(TRS,IDRS,initial) SetRS), SetPR >
-->  => < (res(TRS,IDRS,started) SetRS), SetPR > 
-->     if allPROfRSInStates(SetPR,IDRS,ready) .
--> ********************************************
--> *************************************************************************
--> Step 6-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRS,initial) sRS), sPR >) = true .
}
--> ************************************************************
--> Step 6-3: Split the most general case for a rule into cases
-->  where the condition of the rule does or does not hold. 
--> ************************************************************
:ctf {
  eq allPROfRSInStates(sPR,idRS,ready) = true .
}
:ctf {
  eq sPR = empPR .
}
:apply (rd) -- 1-1
:apply (rd) -- 1-2
:apply (rd) -- 2
show proof

--> ****************************************************
-->  trans [R02]:
-->     < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
-->  => < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
--> ****************************************************
--> *************************************************************************
--> Step 6-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >) = true .
}
:apply (rd) -- goal
show proof
select

--> ***********************************
--> Proof of wfs-allPRHaveRS.
-->  eq wfs-allPRHaveRS(< SetRS,SetPR >)
-->     = allPRHaveRS(SetPR,SetRS) .
--> ***********************************
--> Proof of inv(S) implies inv(SS)
module! Proofwfs-allPRHaveRS {
  protecting(ProofInv)

  var S : State
  eq invK(S) = wfs-allPRHaveRS(S) .

  var SetRS : SetOfResource
  var SetPR : SetOfProperty
  var TRS : RSType
  var IDRS : RSID

--> ******************************************************************
--> Step 5-1,6-1: Instantiate proved lemmas for predefined predicates.
--> ******************************************************************
  -- Instantiating m2o-lemma05:
  eq [m2o-lemma05]:
     (allPRHaveRS(SetPR,(res(TRS,IDRS,initial) SetRS))
      and allPRHaveRS(SetPR,(res(TRS,IDRS,started) SetRS)))
    = allPRHaveRS(SetPR,(res(TRS,IDRS,initial) SetRS)) .
}

select Proofwfs-allPRHaveRS 
--> ***************************
--> (5) init(S) implies inv(S).
--> ***************************
-- Since wfs-* is imposed by init(S), init(S) implies wfs-* always holds.

--> ***************************
--> (6) inv(S) implies inv(SS).
--> ***************************
--> ********************************************
-->  ctrans [R01]:
-->     < (res(TRS,IDRS,initial) SetRS), SetPR >
-->  => < (res(TRS,IDRS,started) SetRS), SetPR > 
-->     if allPROfRSInStates(SetPR,IDRS,ready) .
--> ********************************************
--> *************************************************************************
--> Step 6-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRS,initial) sRS), sPR >) = true .
}
--> ************************************************************
--> Step 6-3: Split the most general case for a rule into cases
-->  where the condition of the rule does or does not hold. 
--> ************************************************************
:ctf {
  eq allPROfRSInStates(sPR,idRS,ready) = true .
}
:apply (rd) -- 1
:apply (rd) -- 2
show proof

--> ****************************************************
-->  trans [R02]:
-->     < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
-->  => < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
--> ****************************************************
--> *************************************************************************
--> Step 6-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >) = true .
}
:apply (rd) -- goal
show proof
select

--> ***********************************
--> Proof of wfs-allPRHaveRRS.
-->  eq wfs-allPRHaveRRS(< SetRS,SetPR >)
-->     = allPRHaveRRS(SetPR,SetRS) .
--> ***********************************
--> Proof of inv(S) implies inv(SS)
module! Proofwfs-allPRHaveRRS {
  protecting(ProofInv)

  var S : State
  eq invK(S) = wfs-allPRHaveRRS(S) .

  var SetRS : SetOfResource
  var SetPR : SetOfProperty
  var IDRS : RSID
  var TRS : RSType

--> ******************************************************************
--> Step 5-1,6-1: Instantiate proved lemmas for predefined predicates.
--> ******************************************************************
  -- Instantiating m2o-lemma05:
  eq [m2o-lemma05]:
     (allPRHaveRRS(SetPR,(res(TRS,IDRS,initial) SetRS))
      and allPRHaveRRS(SetPR,(res(TRS,IDRS,started) SetRS)))
    = allPRHaveRRS(SetPR,(res(TRS,IDRS,initial) SetRS)) .
}

select Proofwfs-allPRHaveRRS 
--> ***************************
--> (5) init(S) implies inv(S).
--> ***************************
-- Since wfs-* is imposed by init(S), init(S) implies wfs-* always holds.

--> ***************************
--> (6) inv(S) implies inv(SS).
--> ***************************
--> ********************************************
-->  ctrans [R01]:
-->     < (res(TRS,IDRS,initial) SetRS), SetPR >
-->  => < (res(TRS,IDRS,started) SetRS), SetPR > 
-->     if allPROfRSInStates(SetPR,IDRS,ready) .
--> ********************************************
--> *************************************************************************
--> Step 6-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRS,initial) sRS), sPR >) = true .
}
--> ************************************************************
--> Step 6-3: Split the most general case for a rule into cases
-->  where the condition of the rule does or does not hold. 
--> ************************************************************
:ctf {
  eq allPROfRSInStates(sPR,idRS,ready) = true .
}
:apply (rd) -- 1
:apply (rd) -- 2
show proof

--> ****************************************************
-->  trans [R02]:
-->     < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
-->  => < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
--> ****************************************************
--> *************************************************************************
--> Step 6-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >) = true .
}
:apply (rd) -- goal
show proof
select

--> ***********************************
--> Proof of wfs-atLeastOneRS.
-->  eq wfs-atLeastOneRS(< SetRS,SetPR >)
-->     = atLeastOneRS(SetPR,SetRS) .
--> ***********************************
--> Proof of inv(S) implies inv(SS)
module! Proofwfs-atLeastOneRS {
  protecting(ProofInv)

  var S : State
  eq invK(S) = wfs-atLeastOneRS(S) .
}

select Proofwfs-atLeastOneRS 
--> ***************************
--> (5) init(S) implies inv(S).
--> ***************************
-- Since wfs-* is imposed by init(S), init(S) implies wfs-* always holds.

--> ***************************
--> (6) inv(S) implies inv(SS).
--> ***************************
--> ********************************************
-->  ctrans [R01]:
-->     < (res(TRS,IDRS,initial) SetRS), SetPR >
-->  => < (res(TRS,IDRS,started) SetRS), SetPR > 
-->     if allPROfRSInStates(SetPR,IDRS,ready) .
--> ********************************************
--> *************************************************************************
--> Step 6-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRS,initial) sRS), sPR >) = true .
}
--> ************************************************************
--> Step 6-3: Split the most general case for a rule into cases
-->  where the condition of the rule does or does not hold. 
--> ************************************************************
:ctf {
  eq allPROfRSInStates(sPR,idRS,ready) = true .
}
:apply (rd) -- 1
:apply (rd) -- 2
show proof

--> ****************************************************
-->  trans [R02]:
-->     < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
-->  => < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
--> ****************************************************
--> *************************************************************************
--> Step 6-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invinv(< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >) = true .
}
:apply (rd) -- goal
show proof
select

--> *************************************
--> Proof of wfs-noRSCycle.
-->  eq wfs-noRSCycle(S) = noRSCycle(S) .
--> *************************************j
--> Proof of inv(S) implies inv(SS)
module! Proofwfs-noRSCycle {
  protecting(ProofInv)

  vars S SS : State
  var CC : Bool
  vars RS RS' : Resource
  var SetRS : SetOfResource
  var SetSRS : SetOfRSState
  var SetPR : SetOfProperty

  -- When subset(DDSC(RS,SS),DDSC(RS,S)) holds for all RS,
  -- noRSCycle(S) implies noRSCycle(SS),
  pred invnoRSCycle : Resource State
  eq invnoRSCycle(RS,S) 
     = not (S =(*,1)=>+ SS if CC suchThat
            not ((CC implies subset(DDSC(RS,SS),DDSC(RS,S))) == true)
     	   { S => SS !! CC ! subset(DDSC(RS,SS),DDSC(RS,S)) }) .

--> ******************************************************************
--> Step 5-1,6-1: Instantiate proved lemmas for predefined predicates.
--> ******************************************************************
  -- Instantiating set-lemma12:
  eq [set-lemma12]:
    subset(SetRS,SetRS) = true .

  -- Instantiating m2o-lemma24:
  ceq [m2o-lemma24]:
    subset(getRRSsOfPRsInStates((RS' SetRS),SetPR,SetSRS),getRRSsOfPRsInStates((RS SetRS),SetPR,SetSRS))
    = true
    if id(RS) = id(RS') and not state(RS') \in SetSRS .
}

select Proofwfs-noRSCycle 
--> ***************************
--> (5) init(S) implies inv(S).
--> ***************************
-- Since wfs-* is imposed by init(S), init(S) implies wfs-* always holds.

--> ***************************
--> (6) inv(S) implies inv(SS).
--> ***************************
--> ********************************************
-->  ctrans [R01]:
-->     < (res(TRS,IDRS,initial) SetRS), SetPR >
-->  => < (res(TRS,IDRS,started) SetRS), SetPR > 
-->     if allPROfRSInStates(SetPR,IDRS,ready) .
--> ********************************************
--> *************************************************************************
--> Step 6-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invnoRSCycle(x,< (res(trs,idRS,initial) sRS), sPR >) = true .
}
--> ************************************************************
--> Step 6-3: Split the most general case for a rule into cases
-->  where the condition of the rule does or does not hold. 
--> ************************************************************
:ctf {
  eq allPROfRSInStates(sPR,idRS,ready) = true .
}
-- Case 1: When the condition of R01 holds for the resource of idRS:
:ctf {
  eq x = res(trs,idRS,initial) .
}
-- Case 1-1: X is the resource with identifier idRS.
:apply (rd) -- 1-1
-- Case 1-2: X is not the resource with identifier idRS.
:ctf {
  eq state(x) = initial .
}
-- Case 1-2-1: The resource is initial.
:apply (rd) -- 1-2-1
-- Case 1-2-2: The resource is not initial.
:apply (rd) -- 1-2-2
-- Case 2: When the condition of R01 does not hold for the resource of idRS:
:apply (rd) -- 2
show proof

--> ****************************************************
-->  trans [R02]:
-->     < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,notready,IDRS,IDRRS) SetPR) >
-->  => < (res(TRS,IDRRS,started) SetRS), 
-->       (prop(TPR,IDPR,ready   ,IDRS,IDRRS) SetPR) > .
--> ****************************************************
--> *************************************************************************
--> Step 6-2: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq invnoRSCycle(x,< (res(trs,idRRS,started) sRS), (prop(tpr,idPR,notready,idRS,idRRS) sPR) >) = true .
}
:ctf {
  eq x = res(trs,idRRS,started) .
}
-- Case 1: X is the resource with identifier idRRS.
:apply (rd) -- 1
-- Case 2: X is not the resource with identifier idRRS.
:ctf {
  eq state(x) = initial .
}
-- Case 2-1: The resource is initial.
:ctf {
  eq id(x) = idRS .
}
-- Case 2-1-1: The identifier of X is idRS.
:apply (rd) -- 2-1-1
-- Case 2-1-2: The identifier of X is not idRS.
:apply (rd) -- 2-1-2
-- Case 2-2: The resource is not initial.
:apply (rd) -- 2-2
show proof
select

