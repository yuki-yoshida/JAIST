require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ********************************************
-->  ctrans [R01]:
-->     < (res(TRS,IDRS,initial) SetRS), SetPR >
-->  => < (res(TRS,IDRS,started) SetRS), SetPR > 
-->     if allPROfRSInStates(SetPR,IDRS,ready) .
--> ********************************************
select ProofContCont .
-- When R01 can be applied to the state S:
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< (res(trs,idRS,initial) sRS), sPR >) = true .
}
--> ***********************************************************
--> Step 2-2: Split the most general case for a rule into cases
-->  where the condition of the rule does or does not hold.
--> ***********************************************************
-- The condition of R01 does or does not hold for the resource of idRS.
:ctf {
  eq allPROfRSInStates(sPR,idRS,ready) = true .
}
-- Case 1: When the condition of R01 holds for the resource of idRS:
--> ***************************************************************
--> Step 2-3: Split the rule applied case into cases
-->  where predicate final does or does not hold in the next state.
--> ***************************************************************
-- All of the other resources are or are not started.
:csp {
  eq allRSInStates(sRS,started) = true .
  eq sRS = (res(trs',idRS',initial) sRS') .
}
-- Case 1-1: When all of the other resources are started:
:apply (rd) -- 1-1
-- Case 1-2: When there is an initial resource:
--> ************************************************************
--> Step 2-4: Think which rule can be applied to the next state.
--> ************************************************************
-- The next rule should be R01 for the resource of idRS'.
--> ************************************************************************
--> Step 2-5: Split the general case into cases which collectively cover
--> the general case and one of which matches to LHS of the applicable rule.
--> ************************************************************************
--> The case already matches to LHS of R01.
--> ***********************************************************
--> Step 2-6: Split the general case into cases where 
--> the condition of the applicable rule does or does not hold.
--> ***********************************************************
-- The condition of R01 does or does not hold for the resource o idRS'.
:csp {
  eq allPROfRSInStates(sPR,idRS',ready) = true .
  eq sPR = (prop(tpr,idPR,notready,idRS',idRRS) sPR') .
}
-- Case 1-2-1: When all of properties of the resource idRS' are ready.
:apply (rd) -- 1-2-1
-- Case 1-2-2: When at least one of properties of the resource idRS' is not-ready.
-- Because sPR is redefined, allPROfRSInStates(sPR,idRS,ready) should be claimed again.
:set(normalize-init,on)
:init ( ceq B1:Bool = true if not B2:Bool . ) by {
  B1:Bool <- allPROfRSInStates(sPR,idRS,ready) ;
  B2:Bool <- allPROfRSInStates(sPR,idRS,ready) == true ;
}
:set(normalize-init,off)
--> ***********************************************************
--> Step 2-7: When there is a dangling link, split the case
-->  into cases where the linked object does or does not exist.
--> ***********************************************************
-- The resource referred by the property does or does not exist.
:csp {
  eq existRS(sRS',idRRS) = false .
  eq sRS' = (res(trs'',idRRS,srs'') sRS'') .
}
-- Case 1-2-2-1: When the resource referred by the property does not exist:
:apply (rd) -- 1-2-2-1
-- Case 1-2-2-2: When the resource referred by the property exists:
-- The state of the resource is initial or started.
:csp { 
  eq srs'' = initial .
  eq srs'' = started .
}
-- Case 1-2-2-2-1: When the resource idRRS is initial:
--> ******************************************************************************
--> Step 2-8: When falling in a cyclic situation, use the Cyclic Dependency Lemma.
--> ******************************************************************************
-- The Cyclic Dependency Lemma rejects this case.
:init [Cycle] by {
  RS:Resource <- res(trs',idRS',initial);
  S:State <- < (res(trs,idRS,initial) sRS), sPR >;
}
:apply (rd) -- 1-2-2-2-1
-- Case 1-2-2-2-2: When the resource idRRS is started:
:apply (rd) -- 1-2-2-2-2
-- Case 2: When the condition of R01 does not hold for the resource of idRS:
:apply (rd) -- 2
show proof

select
