require ProofContCont Proof-contcont.cafe

--> *********************************************************************************
--> (2) inv(S) and wfs(S) and cont(S) and not final(S) implies cont(SS) or final(SS).
--> *********************************************************************************

--> **************************************************************************
-->  ctrans [R03]:
-->     < SetND, (cap(hostedOn,IDCP,closed,   IDND) SetCP), SetRQ, SetRL, MP >
-->  => < SetND, (cap(hostedOn,IDCP,available,IDND) SetCP), SetRQ, SetRL, MP >
-->     if isCreated(state(getNode(SetND,IDND))) .
--> **************************************************************************
select ProofContCont .
-- When R03 can be applied to the state S:
--> **************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rules.
--> **************************************************************************
:goal {
  eq contcont(< sND, (cap(hostedOn,idCP,closed,idND) sCP), sRQ, sRL, mp >) = true .
}
--> ***********************************************************
--> Step 2-2: Split the most general case for a rule into cases
-->  where the condition of the rule does or does not hold.
--> ***********************************************************
-- The condition of R03 does or does not hold for the node of idND.
:ctf {
  eq isCreated(state(getNode(sND,idND))) = true .
}
-- Case 1: When the condition of R03 holds for the node of idND:
--> ***************************************************************
--> Step 2-3: Split the rule applied case into cases
-->  where predicate final does or does not hold in the next state.
--> ***************************************************************
-- We know that final(S') never holds in this case.
--> ***************************************************************
--> Step 2-4: Think which rule can be applied to the next state
-->  and repeat case splitting similarly as Step 1-3, 1-4, and 1-5.
--> ***************************************************************
-- The next rule should be R04 for the capability of idCP.
--> ********************************************************************
--> Step 1-3: Split the general case into cases which collectively cover
-->  the general case and one of which matches to LHS of the first rule.
--> ********************************************************************
-- LHS of R04 requires a corresponding relationship.
-- There is or is not a corresponding relationship.
:csp {
  eq onlyOneRLOfCP(sRL,idCP) = false .
  eq sRL = (rel(trl,idRL,idCP,idRQ) sRL') .
}
-- Case 1-1: There is not a corresponding relationship:
:apply (rd) -- 1-1
-- Case 1-2: There is a corresponding relationship:
-- The type of the relationship is hostedOn, dependsOn, or connectsTo.
:csp {
  eq trl = hostedOn .
  eq trl = dependsOn .
  eq trl = connectsTo .
}
-- Case 1-2-1: The relationship is hostedOn:
-- There is or is not a corresponding requirement.
:csp {
  eq existRQ(sRQ,idRQ) = false .
  eq sRQ = (req(trl',idRQ,srq,idND') sRQ') .
}
-- Case 1-2-1-1: There is not a corresponding requirement:
:apply (rd) -- 1-2-1-1
-- Case 1-2-1-2: There is a corresponding requirement:
-- The type of the requirement is hostedOn, dependsOn, or connectsTo.
:csp {
  eq trl' = hostedOn .
  eq trl' = dependsOn .
  eq trl' = connectsTo .
}
-- Case 1-2-1-2-1: The requirement is hostedOn:
-- The requirement is unbound, waiting, or ready.
:csp {
  eq srq = unbound .
  eq srq = waiting .
  eq srq = ready .
}
-- Case 1-2-1-2-1-1: The requirement is unbound:
:apply (rd) -- 1-2-1-2-1-1
-- Case 1-2-1-2-1-2: The requirement is waiting:
:apply (rd) -- 1-2-1-2-1-2
-- Case 1-2-1-2-1-3: The requirement is ready:
:apply (rd) -- 1-2-1-2-1-3
-- Case 1-2-1-2-2: The requirement is dependsOn:
:apply (rd) -- 1-2-1-2-2
-- Case 1-2-1-2-3: The requirement is connectsTo:
:apply (rd) -- 1-2-1-2-3
-- Case 1-2-2: The relationship is dependsOn:
:apply (rd) -- 1-2-2
-- Case 1-2-3: The relationship is connectsTo:
:apply (rd) -- 1-2-3
-- Case 2: When the condition of R03 does not hold for the node of idND:
:apply (rd) -- 2
show proof
select
