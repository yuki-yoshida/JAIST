require DomainModel DomainModel.cafe

provide Proof

module! ProofBase {
  protecting(STATERules)

  op _!_ : Bool Bool -> Bool {constr assoc}
  op _=>_!!_ : State State Bool -> Bool {constr}

  var SetND : SetOfNode
  var SetCP : SetOfCapability
  var SetRQ : SetOfRequirement
  var SetRL : SetOfRelationship
  vars IDND IDND1 IDND2 : NDID 
  vars IDCP IDCP1 IDCP2 : CPID 
  var IDRQ  : RQID 
  var IDRL  : RLID 
  var SCP : CPState
  var SRL : RLState
  var MP : PoolOfMsg
  var S : State

  -- The invariant should be defined as the conjunction of all inv-* and all wfs-*.
  -- But this definition causes costly computations.

  -- Invariants defined by using general predicates.
  pred inv-ifNDInitialThenRQUnboundReady : State
  eq inv-ifNDInitialThenRQUnboundReady(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifNDInStatesThenRQInStates(SetND,initial,SetRQ,(unbound ready)) .
  pred inv-ifNDCreatedThenHostedOnRQReady : State
  eq inv-ifNDCreatedThenHostedOnRQReady(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifNDInStatesThenRQOfTypeInStates(SetND,(created started),SetRQ,hostedOn,ready) .
  pred inv-ifNDStartedThenRQReady : State
  eq inv-ifNDStartedThenRQReady(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifNDInStatesThenRQInStates(SetND,started,SetRQ,ready) .
  pred inv-ifCPClosedThenRQUnbound : State
  eq inv-ifCPClosedThenRQUnbound(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifCPInStatesThenRQInStates(SetCP,closed,SetRQ,unbound,SetRL) .
  pred inv-ifCPOpenThenRQUnboundWaiting : State
  eq inv-ifCPOpenThenRQUnboundWaiting(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifCPInStatesThenRQInStates(SetCP,open,SetRQ,(unbound waiting),SetRL) .
  pred inv-HostedOnCPNotOpen : State
  eq inv-HostedOnCPNotOpen(< SetND,SetCP,SetRQ,SetRL,MP >)
     = allHostedOnCPInStates(SetCP,(closed available)) .
  pred inv-HostedOnRQNotWaiting : State
  eq inv-HostedOnRQNotWaiting(< SetND,SetCP,SetRQ,SetRL,MP >)
     = allHostedOnRQInStates(SetRQ,(unbound ready)) .

  -- Problem specific invariants for messaging.
  pred inv-ifConnectsToCPOpenThenRQWaitingOrOpenMsg : State
  eq inv-ifConnectsToCPOpenThenRQWaitingOrOpenMsg(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,open,SetRQ,waiting,SetRL,MP) .
  pred inv-ifConnectsToCPAvailableThenRQWaitingReadyOrOpenMsg : State
  eq inv-ifConnectsToCPAvailableThenRQWaitingReadyOrOpenMsg(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifConnectsToCPInStatesThenRQInStatesOrOpenMsg(SetCP,available,SetRQ,(waiting ready),SetRL,MP) .
  pred inv-ifConnectsToCPAvailableThenRQReadyOrAvailableMsg : State
  eq inv-ifConnectsToCPAvailableThenRQReadyOrAvailableMsg(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifConnectsToCPInStatesThenRQInStatesOrAvailableMsg(SetCP,available,SetRQ,ready,SetRL,MP) .
  pred inv-ifOpenMsgThenCPActivated : State
  eq inv-ifOpenMsgThenCPActivated(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifOpenMsgThenCPInStates(MP,SetCP,(open available)) .
  pred inv-ifAvailableMsgThenCPAvailable : State
  eq inv-ifAvailableMsgThenCPAvailable(< SetND,SetCP,SetRQ,SetRL,MP >)
     = ifAvailableMsgThenCPInStates(MP,SetCP,available) .

--> *************************
--> Step 0-2: Define cont(S).
--> *************************
  pred cont : State
  eq cont(S:State)
     = (S =(*,1)=>+ SS:State) .

--> **********************
--> Step 0-3: Define m(S).
--> **********************
  op m : State -> Nat
  eq m(< SetND,SetCP,SetRQ,SetRL,MP >)
     = (( (#NodeInStates(initial,SetND)        * 2) + #NodeInStates(created,SetND))
     +  ( (#CapabilityInStates(closed,SetCP)    * 2) + #CapabilityInStates(open,SetCP)))
     +  ( (#RequirementInStates(unbound,SetRQ) * 2) + #RequirementInStates(waiting,SetRQ)) .


--> *************************
--> Step 0-4: Define inv(S).
--> *************************
  pred inv : State

  -- wfs-*:
  ceq inv(S) = false if not wfs-uniqND(S) .
  ceq inv(S) = false if not wfs-uniqCP(S) .
  ceq inv(S) = false if not wfs-uniqRQ(S) .
  ceq inv(S) = false if not wfs-uniqRL(S) .
  ceq inv(S) = false if not wfs-allCPHaveND(S) .
  ceq inv(S) = false if not wfs-allRQHaveND(S) .
  ceq inv(S) = false if not wfs-allRLHaveCP(S) .
  ceq inv(S) = false if not wfs-allRLHaveRQ(S) .
  ceq inv(S) = false if not wfs-allCPHaveRL(S) .
  ceq inv(S) = false if not wfs-allRQHaveRL(S) .
  -- Problem specific wfs's for type constraint.
  ceq inv(S) = false if not wfs-allRLHaveSameTypeCPRQ(S) .
  -- Other problem specific wfs's.
  ceq inv(S) = false if not wfs-allRLNotInSameND(S) .
  ceq inv(S) = false if not wfs-allRLHoldLocality(S) .
  ceq inv(S) = false if not wfs-allNDHaveAtMostOneHost(S) .

  -- inv-*:
  ceq inv(S) = false if not inv-ifNDInitialThenRQUnboundReady(S) .
  ceq inv(S) = false if not inv-ifNDCreatedThenHostedOnRQReady(S) .
  ceq inv(S) = false if not inv-ifNDStartedThenRQReady(S) .
  ceq inv(S) = false if not inv-ifCPClosedThenRQUnbound(S) .
  ceq inv(S) = false if not inv-ifCPOpenThenRQUnboundWaiting(S) .
  ceq inv(S) = false if not inv-HostedOnCPNotOpen(S) .
  ceq inv(S) = false if not inv-HostedOnRQNotWaiting(S) .
  -- Problem specific invariants for messaging.
  ceq inv(S) = false if not inv-ifConnectsToCPOpenThenRQWaitingOrOpenMsg(S) .
  ceq inv(S) = false if not inv-ifConnectsToCPAvailableThenRQWaitingReadyOrOpenMsg(S) .
  ceq inv(S) = false if not inv-ifConnectsToCPAvailableThenRQReadyOrAvailableMsg(S) .
  -- Problem specific invariants for proving other invariants.
  ceq inv(S) = false if not inv-ifOpenMsgThenCPActivated(S) .
  ceq inv(S) = false if not inv-ifAvailableMsgThenCPAvailable(S).

--> ********************************************************
--> Step 0-5: Prepare for using the Cyclic Dependency Lemma.
--> ********************************************************
  -- From Cyclic Dependency Lemma
  -- There is an initial resource whose DDSC includes no initial resourecs.
  ceq [CycleR01 :nonexec]: 
     true = false if someNDInStates(DDSC(node(T:NDType,I:NDID,initial),S:State),initial) .

  -- There is a created resource whose DDSC includes no created resourecs.
  ceq [CycleR02 :nonexec]: 
     true = false if someNDInStates(DDSC(node(T:NDType,I:NDID,created),S:State),created) .

--> **************************************
--> Step 0-6: Prepare arbitrary constants.
--> **************************************
  ops idND idND' idND1 idND2 idND3 : -> NDIDLt
  ops idCP idCP' idCP1 idCP2 idCP3 : -> CPIDLt
  ops idRQ idRQ' idRQ1 idRQ2 idRQ3 : -> RQIDLt
  ops idRL idRL' idRL1 idRL2 idRL3 : -> RLIDLt
  ops sND sND' sND'' sND''' : -> SetOfNode
  ops sCP sCP' sCP'' sCP''' : -> SetOfCapability
  ops sRQ sRQ' sRQ'' sRQ''' : -> SetOfRequirement
  ops sRL sRL' sRL'' sRL''' : -> SetOfRelationship
  ops tnd tnd' tnd'' tnd''' : -> NDType
  ops trl trl' trl'' trl''' : -> RLType
  ops snd snd' snd'' : -> NDState
  ops scp scp' scp'' : -> CPState
  ops srq srq' srq'' : -> RQState
  op stND : -> SetOfNDState
  op stCP : -> SetOfCPState
  op stRQ : -> SetOfRQState
  ops mp mp' : -> PoolOfMsg
  op msg : -> Msg
}

-- ***************************************************************************************
-- (1) init(S) implies cont(S).
-- (2) inv(S) and not final(S) implies cont(SS) or final(SS).
-- (3) inv(S) and not final(S) implies measure(S) > measure(SS).
-- (4) inv(S) and (cont(S) or final(S)) and measure(S) = 0 implies final(S).
-- (5) init(S) implies inv(S).
-- (6) inv(S) implies inv(SS).
-- ***************************************************************************************

-- ***************************************************************************************
-- (1) init(S) implies cont(S).
-- ***************************************************************************************
-- in Proof-initcont.cafe

-- **************************************************************************************
-- (2) inv(S) and not final(S) implies cont(SS) or final(SS).
-- **************************************************************************************
-- in Proof-contcont.cafe

-- **************************************************************************************
-- (3) inv(S) and not final(S) implies measure(S) > measure(SS).
-- (4) inv(S) and (cont(S) or final(S)) and measure(S) = 0 implies final(S).
-- **************************************************************************************
-- in Proof-measure.cafe

-- **************************************************************************************
-- (5) init(S) implies inv(S).
-- (6) inv(S) implies inv(SS).
-- ***************************************************************************************
-- in Proof-inv.cafe
