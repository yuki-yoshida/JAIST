require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ************************************************************************************************
-->  trans [R04]:
-->     < SetND, (cap(hostedOn,IDCP,available,IDND1) SetCP), 
-->  	      (req(hostedOn,IDRQ,unbound,IDND2) SetRQ), (rel(hostedOn,IDRL,IDCP,IDRQ) SetRL), MP >
-->  => < SetND, (cap(hostedOn,IDCP,available,IDND1) SetCP), 
-->  	      (req(hostedOn,IDRQ,ready,  IDND2) SetRQ), (rel(hostedOn,IDRL,IDCP,IDRQ) SetRL), MP > .
--> ************************************************************************************************
select ProofContCont .
-- When R0R can be applied to the state S:
--> **************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rules.
--> **************************************************************************
:goal {
  eq contcont(< sND, 
                (cap(hostedOn,idCP,available,idND) sCP),
                (req(hostedOn,idRQ,unbound,idND')  sRQ),
                (rel(hostedOn,idRL,idCP,idRQ)      sRL), mp >) = true .
}
--> ***********************************************************
--> Step 2-2: Split the most general case for a rule into cases
-->  where the condition of the rule does or does not hold.
--> ***********************************************************
-- R04 is an unconditional rule.
--> ***************************************************************
--> Step 2-3: Split the rule applied case into cases
-->  where predicate final does or does not hold in the next state.
--> ***************************************************************
-- We know that final(S') never holds in this case.
--> ***************************************************************
--> Step 2-4: Think which rule can be applied to the next state
-->  and repeat case splitting similarly as Step 1-3, 1-4, and 1-5.
--> ***************************************************************
-- The next rule should be R01 for the node of idND'.
--> ********************************************************************
--> Step 1-3: Split the general case into cases which collectively cover
-->  the general case and one of which matches to LHS of the first rule.
--> ********************************************************************
-- LHS of R01 requires a corresponding node.
-- There is or is not a corresponding node.
:csp {
  eq existND(sND,idND') = false .
  eq sND = (node(tnd,idND',snd) sND') .
}
-- Case 1: There is not a corresponding node:
:apply (rd) -- 1
-- Case 2: There is a corresponding relationship:
-- The node is initial, created, or started.
:csp {
  eq snd = initial .
  eq snd = created .
  eq snd = started .
}
-- Case 2-1: The node is initial.
:apply (rd) -- 2-1
-- Case 2-2: The node is created.
:apply (rd) -- 2-2
-- Case 2-3: The node is strated.
:apply (rd) -- 2-3
show proof
select
