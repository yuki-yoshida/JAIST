require ProofContCont Proof-contcont.cafe

--> **********************************************************
--> (2) inv(S) and not final(S) implies cont(SS) or final(SS).
--> **********************************************************

--> ***************************************************************************
-->  ctrans [R06]:
-->     < SetND, (cap(dependsOn,IDCP,open,     IDND) SetCP), SetRQ, SetRL, MP >
-->  => < SetND, (cap(dependsOn,IDCP,available,IDND) SetCP), SetRQ, SetRL, MP >
-->     if state(getNode(SetND,IDND)) = started .
--> ***************************************************************************
select ProofContCont .
-- When R06 can be applied to the state S:
--> *************************************************************************
--> Step 2-1: Begin with the cases each of which matches to LHS of each rule.
--> *************************************************************************
:goal {
  eq contcont(< sND, (cap(dependsOn,idCP,open,idND) sCP), sRQ, sRL, mp >) = true .
}
--> ***************************************************************
--> Step 2-7: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The node of the capability of idCP does or does not exist.
:csp {
  eq existND(sND,idND) = false .
  eq sND = (node(tnd,idND,snd) sND') .
}
-- Case 1: The node of the capability of idCP does not exist:
:apply (rd) -- 1
-- Case 2: The node of the capability of idCP exists:
--> ******************************************************
--> Step 2-2: Split the current case for a rule into cases
--> where the condition of the rule does or does not hold.
--> ******************************************************
-- The condition of R06 does or does not hold for the node of idND.
:csp {
  eq snd = initial .
  eq snd = created .
  eq snd = started .
}
-- Case 2-1: The node is initial:
:apply (rd) -- 2-1
-- Case 2-2: The node is created:
:apply (rd) -- 2-2
-- Case 2-3: The node is started:
--> *********************************************************
--> Step 2-3: Split the current case into cases where
-->  predicate final does or does not hold in the next state.
--> *********************************************************
-- We know that final(SS) never holds in this case.
--> ***************************************************************
--> Step 2-4: Consider which rule can be applied to the next state.
--> ***************************************************************
-- The next rule should be R08 for the capability of idCP.
--> *************************************************************************************
--> Step 2-5: Split the current case into cases which collectively cover the current case
-->  and the next state of one of the split cases matches to LHS of the current rule.
--> *************************************************************************************
-- LHS of R08 requires a corresponding relationship.
-- There is or is not a corresponding relationship.
:csp {
  eq onlyOneRLOfCP(sRL,idCP) = false .
  eq sRL = (rel(trl,idRL,idCP,idRQ) sRL') .
}
-- Case 2-3-1: There is not a corresponding relationship:
:apply (rd) -- 2-3-1
-- Case 2-3-2: There is a corresponding relationship:
-- The type of the relationship is hostedOn, dependsOn, or connectsTo.
:csp {
  eq trl = hostedOn .
  eq trl = dependsOn .
  eq trl = connectsTo .
}
-- Case 2-3-2-1: The relationship is hostedOn:
:apply (rd) -- 2-3-2-1
-- Case 2-3-2-2: The relationship is dependsOn:
-- There is or is not a corresponding requirement.
:csp {
  eq existRQ(sRQ,idRQ) = false .
  eq sRQ = (req(trl',idRQ,srq,idND') sRQ') .
}
-- Case 2-3-2-2-1: There is not a corresponding requirement:
:apply (rd) -- 2-3-2-2-1
-- Case 2-3-2-2-2: There is a corresponding requirement:
-- The type of the requirement is hostedOn, dependsOn, or connectsTo.
:csp {
  eq trl' = hostedOn .
  eq trl' = dependsOn .
  eq trl' = connectsTo .
}
-- Case 2-3-2-2-2-1: The requirement is hostedOn:
:apply (rd) -- 2-3-2-2-2-1
-- Case 2-3-2-2-2-2: The requirement is dependsOn:
-- The requirement is unbound, waiting, or ready.
:csp {
  eq srq = unbound .
  eq srq = waiting .
  eq srq = ready .
}
-- Case 2-3-2-2-2-2-1: The requirement is unbound:
--> ***************************************************************
--> Step 2-4: Consider which rule can be applied to the next state.
--> ***************************************************************
-- The next rule should be R07 for the requirement of idRQ.
--> ***************************************************************
--> Step 2-7: When there is a dangling link, split the current case
-->  into cases where the linked object does or does not exist.
--> ***************************************************************
-- The node of the requirement of idRQ does or does not exist.
:csp {
  eq existND(sND',idND') = false .
  eq sND' = (node(tnd',idND',snd') sND'') .
}
-- Case 2-3-2-2-2-2-1-1: The node of the requirement of idRQ does not exist:
:apply (rd) -- 2-3-2-2-2-2-1-1
-- Case 2-3-2-2-2-2-1-2: The node of the requirement of idRQ exists:
--> ***************************************************************
--> Step 2-6: Split the current case into cases where the condition
-->  of the current rule does or does not hold in the next state.
--> ***************************************************************
-- The condition of R07 does or does not hold for the requirement of idRQ.
-- The states of the node of the requirement of idRQ is or is not created.
:csp {
  eq snd' = initial .
  eq snd' = created .
  eq snd' = started .
}
-- Case 2-3-2-2-2-2-1-2-1: The node is initial:
:apply (rd) -- 2-3-2-2-2-2-1-2-1
-- Case 2-3-2-2-2-2-1-2-2: The node is created:
:apply (rd) -- 2-3-2-2-2-2-1-2-2
-- Case 2-3-2-2-2-2-1-2-3: The node is started:
:apply (rd) -- 2-3-2-2-2-2-1-2-3
-- Case 2-3-2-2-2-2-2: The requirement is waiting:
:apply (rd) -- 2-3-2-2-2-2-2
-- Case 2-3-2-2-2-2-3: The requirement is ready:
:apply (rd) -- 2-3-2-2-2-2-3
-- Case 2-3-2-2-2-3: The requirement is connectsTo:
:apply (rd) -- 2-3-2-2-2-3
-- Case 2-3-2-3: The relationship is connectsTo:
:apply (rd) -- 2-3-2-3
show proof
select
